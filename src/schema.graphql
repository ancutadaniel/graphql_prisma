type Query {
  me: User!
  user: User!
  users(
    query: String
    skip: Int
    take: Int
    after: String
    sortField: String
    sortOrder: String
  ): [User!]!
  post(id: String!): Post!
  posts(
    query: String
    skip: Int
    take: Int
    after: String
    sortField: String
    sortOrder: String
  ): [Post!]!
  comment(id: String!): Comment!
  comments(
    query: String
    skip: Int
    take: Int
    after: String
    sortField: String
    sortOrder: String
  ): [Comment!]!
  myPosts(
    query: String
    skip: Int
    take: Int
    after: String
    sortField: String
    sortOrder: String
  ): [Post!]!
}

type Mutation {
  login(data: LoginUserInput!): AuthPayload!
  createUser(data: CreateUserInput!): AuthPayload!
  deleteUser: User!
  updateUser(data: UpdateUserInput!): User!
  createPost(data: CreatePostInput!): Post!
  deletePost(id: String!): Post!
  updatePost(id: String!, data: UpdatePostInput!): Post!
  createComment(data: CreateCommentInput!): Comment!
  deleteComment(id: String!): Comment!
  updateComment(id: String!, data: UpdateCommentInput!): Comment!
}

type Subscription {
  comment(postId: String!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
  myPosts: PostSubscriptionPayload!
}

type AuthPayload {
  token: String!
  user: User!
}

input LoginUserInput {
  email: String!
  password: String!
}

type User {
  id: String!
  name: String!
  email: String
  password: String
  age: Int
  posts: [Post!]!
  comments: [Comment!]!
  updatedAt: String!
  createdAt: String!
}

type Post {
  id: String!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
  updatedAt: String!
  createdAt: String!
}

type Comment {
  id: String!
  text: String!
  author: User!
  post: Post!
  updatedAt: String!
  createdAt: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  age: Int
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
}

input CreateCommentInput {
  text: String!
  postId: String!
}

input UpdateUserInput {
  name: String
  email: String
  age: Int
  password: String
}

input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

input UpdateCommentInput {
  text: String
}

type PostSubscriptionPayload {
  mutation: MutationType!
  data: Post!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  data: Comment!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}
